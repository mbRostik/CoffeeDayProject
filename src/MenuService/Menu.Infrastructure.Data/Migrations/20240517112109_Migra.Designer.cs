// <auto-generated />
using System.ComponentModel.DataAnnotations.Schema;
using Menu.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Menu.Infrastructure.Data.Migrations
{
    [DbContext(typeof(MenuDbContext))]
    [Migration("20240517112109_Migra")]
    partial class Migra
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Menu.Domain.Bag", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Bags");
                });

            modelBuilder.Entity("Menu.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.Identity);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Water",
                            Photo = new byte[0]
                        },
                        new
                        {
                            Id = 2,
                            Name = "Coffee",
                            Photo = new byte[0]
                        },
                        new
                        {
                            Id = 3,
                            Name = "Smoothie",
                            Photo = new byte[0]
                        },
                        new
                        {
                            Id = 4,
                            Name = "MilkShake",
                            Photo = new byte[0]
                        },
                        new
                        {
                            Id = 5,
                            Name = "Iced Coffee",
                            Photo = new byte[0]
                        },
                        new
                        {
                            Id = 6,
                            Name = "Salad",
                            Photo = new byte[0]
                        },
                        new
                        {
                            Id = 7,
                            Name = "Soup",
                            Photo = new byte[0]
                        },
                        new
                        {
                            Id = 8,
                            Name = "Breakfast",
                            Photo = new byte[0]
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sandwich",
                            Photo = new byte[0]
                        },
                        new
                        {
                            Id = 10,
                            Name = "Soft Drinks",
                            Photo = new byte[0]
                        });
                });

            modelBuilder.Entity("Menu.Domain.CategoryWithProduct", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoriesWithProducts");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Menu.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.Identity);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Just a water",
                            Name = "Water",
                            Photo = new byte[0],
                            Price = 1f
                        },
                        new
                        {
                            Id = 2,
                            Description = "Ia ne shariy za cofe",
                            Name = "Amerecano",
                            Photo = new byte[0],
                            Price = 2f
                        });
                });

            modelBuilder.Entity("Menu.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Menu.Domain.Bag", b =>
                {
                    b.HasOne("Menu.Domain.Product", "Product")
                        .WithMany("Bags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Menu.Domain.User", "User")
                        .WithMany("Bags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Menu.Domain.CategoryWithProduct", b =>
                {
                    b.HasOne("Menu.Domain.Category", "Category")
                        .WithMany("CategoryWithProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Menu.Domain.Product", "Product")
                        .WithMany("CategoryWithProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Menu.Domain.Category", b =>
                {
                    b.Navigation("CategoryWithProducts");
                });

            modelBuilder.Entity("Menu.Domain.Product", b =>
                {
                    b.Navigation("Bags");

                    b.Navigation("CategoryWithProducts");
                });

            modelBuilder.Entity("Menu.Domain.User", b =>
                {
                    b.Navigation("Bags");
                });
#pragma warning restore 612, 618
        }
    }
}
